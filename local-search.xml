<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OOP随手记-Lec.7:组合与继承</title>
    <link href="/SekiroBlog/2022/04/30/OOP%E9%9A%8F%E6%89%8B%E8%AE%B0-Lec-7-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <url>/SekiroBlog/2022/04/30/OOP%E9%9A%8F%E6%89%8B%E8%AE%B0-Lec-7-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>继续进行一些博客的水经验帖。</p><span id="more"></span><h2 id="Lec-7-组合与继承"><a href="#Lec-7-组合与继承" class="headerlink" title="Lec.7 组合与继承"></a>Lec.7 组合与继承</h2><h3 id="对象组合：”has-a”"><a href="#对象组合：”has-a”" class="headerlink" title="对象组合：”has a”"></a>对象组合：”has a”</h3><p>组合：“对象套对象”</p><p>1、两种访问成员对象的接口：<img src="/SekiroBlog/img/03.assets/image-20220402135343978.png" alt="image-20220402135343978"></p><p>2、子对象构造时若需要参数，则应在当前<strong>类的构造函数的初始化列表</strong>中进行。若使用<strong>默认构造函数来构造子对象，则不用做任何处理。</strong>（会自动调用子对象的默认构造函数！）</p><p>e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C3</span> &#123;<span class="hljs-comment">//Composite3类别</span><br>  <span class="hljs-type">int</span> num;<br>  S1 sub_obj1; <span class="hljs-comment">/// 构造函数带参数</span><br>  S2 sub_obj2; <span class="hljs-comment">/// 构造函数不带参数</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">C3</span>() : <span class="hljs-built_in">num</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">sub_obj1</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">/// 构造函数初始化列表中构造子对象</span><br>&#123; cout &lt;&lt; <span class="hljs-string">&quot;C3()&quot;</span> &lt;&lt; endl; &#125;<br>  <span class="hljs-built_in">C3</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">num</span>(n), <span class="hljs-built_in">sub_obj1</span>(<span class="hljs-number">123</span>) <br>&#123; cout &lt;&lt; <span class="hljs-string">&quot;C3(int)&quot;</span> &lt;&lt; endl; &#125;<br>  <span class="hljs-built_in">C3</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k) : <span class="hljs-built_in">num</span>(n), <span class="hljs-built_in">sub_obj1</span>(k) <br>&#123; cout &lt;&lt; <span class="hljs-string">&quot;C3(int, int)&quot;</span> &lt;&lt; endl; &#125;<br>  ~<span class="hljs-built_in">C3</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;~C3()&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  C3 a, <span class="hljs-built_in">b</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>), <span class="hljs-built_in">d</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/03.assets/image-20220402140118690.png" alt="image-20220402140118690"></p><p>3、<strong>对象构造与析构函数的次序</strong></p><p>•先完成子对象构造，再完成当前对象构造</p><p>•子对象构造的次序仅由在类中声明的次序所决定</p><p>•析构函数的次序与构造函数相反</p><p>4、隐式定义的拷贝构造与拷贝赋值</p><p>•如果调用拷贝构造函数且没有给类显式定义拷贝构造函数，编译器将提供“隐式定义的拷贝构造函数”。该函数的功能为：</p><p>•<strong>递归调用所有子对象的拷贝构造函数</strong>——具体取决于子对象的拷贝构造函数的定义方式与功能</p><p>•对于基础类型，采用位拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">C1</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">i</span>(n)&#123;&#125;<br><span class="hljs-built_in">C1</span>(<span class="hljs-type">const</span> C1 &amp;other) <span class="hljs-comment">/// 显式定义拷贝构造函数</span><br>&#123;i=other.i; cout &lt;&lt; <span class="hljs-string">&quot;C1(const C1 &amp;other)&quot;</span> &lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> j;<br><span class="hljs-built_in">C2</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">j</span>(n)&#123;&#125;<br>C2&amp; <span class="hljs-keyword">operator</span>= (<span class="hljs-type">const</span> C2&amp; right)&#123;<span class="hljs-comment">/// 显式定义赋值运算符</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;right)&#123;<br>j = right.j;<br>cout &lt;&lt; <span class="hljs-string">&quot;operator=(const C2&amp;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C3</span>&#123;<br><span class="hljs-keyword">public</span>:<br>C1 c1;<br>C2 c2;<br><span class="hljs-built_in">C3</span>():<span class="hljs-built_in">c1</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">c2</span>(<span class="hljs-number">0</span>)&#123;&#125;<br><span class="hljs-built_in">C3</span>(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j):<span class="hljs-built_in">c1</span>(i), <span class="hljs-built_in">c2</span>(j)&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;c1.i = &quot;</span> &lt;&lt; c1.i &lt;&lt; <span class="hljs-string">&quot; c2.j = &quot;</span> &lt;&lt; c2.j &lt;&lt; endl;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">C3 <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br><span class="hljs-function">C3 <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;  <span class="hljs-comment">//C1执行显式定义的拷贝构造，                               C2执行隐式定义的拷贝构造</span><br>cout &lt;&lt; <span class="hljs-string">&quot;b: &quot;</span>;<br>b.<span class="hljs-built_in">print</span>();<br>cout &lt;&lt; endl;<br><br>C3 c;<br>cout &lt;&lt; <span class="hljs-string">&quot;c: &quot;</span>;<br>c.<span class="hljs-built_in">print</span>();<br>c = a;  <span class="hljs-comment">//C1执行隐式定义的拷贝赋值，                          C2执行显式定义的拷贝赋值</span><br>cout &lt;&lt; <span class="hljs-string">&quot;c: &quot;</span>;<br>c.<span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象继承：”is-a”"><a href="#对象继承：”is-a”" class="headerlink" title="对象继承：”is-a”"></a>对象继承：”is-a”</h3><p>一般——特殊；父——子；特殊类</p><p>•如果类A具有<strong>类B全部的属性和服务</strong>，而且具有自己<strong>特有的某些属性或服务</strong>，则称A为B的特殊类，B为A的一般类。</p><p>•如果类A的全部对象都是类B的对象，而且类B中存在不属于类A的对象，则A是B的特殊类，B是A的一般类。</p><p>1、定义与分类</p><p>被继承的已有类，被称为<strong>基类</strong>(base class)，也称“父类”。<br>通过继承得到的新类，被为<strong>派生类</strong>(derived class，也称“子类”、“扩展类”。</p><p>继承的内容：数据成员，函数成员</p><p>常见的继承方式：public, private——继承关键字</p><ul><li>class Derived : [private] Base { .. }; 缺省继承方式为private继承。</li><li>class Derived : public Base { … };</li><li>protected 继承很少被使用<br>class Derived : protected Base { … };</li></ul><p>2、什么没法被继承？</p><blockquote><p>•构造函数：创建派生类对象时，必须调用派生类的构造函数，<strong>派生类构造函数调用基类的构造函数</strong>，以创建派生对象的基类部分。C++11新增了继承构造函数的机制（使用using），但默认不继承</p><p>•析构函数：释放对象时，<strong>先调用派生类</strong>析构函数，再调用基类析构函数</p><p>•赋值运算符：编译器不会继承基类的赋值运算符（因为其参数为基类）</p><p>•但会<strong>自动合成隐式定义的赋值运算符（参数为派生类），其功能为调用基类的赋值运算符。</strong></p><p>•友元函数：不是类成员</p></blockquote><p>e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;Base::f()&quot;</span> &lt;&lt; endl;&#125;<br>Base &amp; <span class="hljs-keyword">operator</span>= (<span class="hljs-type">const</span> Base &amp;right)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;right)&#123;<br>k = right.k;<br>cout &lt;&lt; <span class="hljs-string">&quot;operator= (const Base &amp;right)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive</span>: <span class="hljs-keyword">public</span> Base&#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Derive d, d2;<br>cout &lt;&lt; d.k &lt;&lt; endl; <span class="hljs-comment">//Base数据成员被继承</span><br>d.<span class="hljs-built_in">f</span>(); <span class="hljs-comment">//Base::f()被继承</span><br><br>Base e;<br><span class="hljs-comment">//d = e; //编译错误，Base的赋值运算符不被继承</span><br>d = d2;  <span class="hljs-comment">//调用隐式定义的赋值运算符！看前面笔记</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="派生类的构造与析构"><a href="#派生类的构造与析构" class="headerlink" title="派生类的构造与析构"></a>派生类的构造与析构</h4><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><ul><li>基类中的数据成员，通过继承成为派生类对象的一部分，需要在构造派生类对象的过程中调用基类构造函数来正确初始化。<br>若没有显式调用，则编译器会<strong>自动调用基类</strong>的默认构造函数。<br>若想要显式调用，则只能在派生类构造函数的<strong>初始化成员列表</strong>中进行，既可以调用基类中不带参数的默认构造函数，也可以调用合适的带参数的其他构造函数。</li><li><strong>先执行基类的构造函数来初始化继承来的数据，再执行派生类的构造函数。</strong></li><li>对象析构时，先执行派生类析构函数，再执行由编译器自动调用的基类的析构函数。</li></ul><p>例子见ppt</p><h4 id="2、继承构造函数"><a href="#2、继承构造函数" class="headerlink" title="2、继承构造函数"></a>2、继承构造函数</h4><ul><li><p>如何继承基类的构造函数？使用using Base::Base，<strong>相当于给派生类“定义”了相应参数的构造函数</strong></p><p>当基类存在多个构造函数时，使用using会给派生类自动构造多个相应的构造函数。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> <br>&#123;<br>    <span class="hljs-type">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>(<span class="hljs-type">int</span> i) : <span class="hljs-built_in">data</span>(i) &#123; cout &lt;&lt; <span class="hljs-string">&quot;Base::Base(&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;)\n&quot;</span>; &#125;<br><span class="hljs-built_in">Base</span>(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) <br>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Base::Base(&quot;</span> &lt;&lt; i &lt;&lt; “,<span class="hljs-string">&quot; &lt;&lt; j &lt;&lt; &quot;</span>)\n<span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">class Derive : public Base &#123;</span><br><span class="hljs-string">public:</span><br><span class="hljs-string">    using Base::Base; ///相当于 Derive(int i):Base(i)&#123;&#125;;</span><br><span class="hljs-string">                     ///加上 Derive(int i, int j):Base(i，j)&#123;&#125;;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">int main() &#123;</span><br><span class="hljs-string">    Derive obj1(356);</span><br><span class="hljs-string">Derive obj2(356, 789);</span><br><span class="hljs-string">    return 0;</span><br><span class="hljs-string">&#125; // g++ 1.cpp –o 1.out -std=c++11</span><br></code></pre></td></tr></table></figure><ul><li>如果基类的某个构造函数被声明为私有成员函数，则不能在派生类中声明继承该构造函数。</li><li>如果派生类使用了继承构造函数，编译器就<strong>不会再为派生类生成隐式定义</strong>的默认构造函数。（如上例，Derive obj;无法通过）<br>前面的例子，不能用Derive dr；定义对象</li></ul><h4 id="3、几种继承方式的比较"><a href="#3、几种继承方式的比较" class="headerlink" title="3、几种继承方式的比较"></a>3、几种继承方式的比较</h4><p><img src="/SekiroBlog/img/03.assets/image-20220410111511874.png" alt="image-20220410111511874"></p><p>public继承<br>基类的公有成员，保护成员，私有成员作为派生类的成员时，都<strong>保持原有的状态</strong>。<br>private继承<br>基类的公有成员，保护成员，私有成员作为派生类的成员时，<strong>都作为私有成员</strong>。<br>protected继承<br>基类的公有成员，保护成员作为派生类的成员时，都成为保护成员，基类的私有成员仍然是私有的。</p><img src="/img/03.assets/image-20220402143405086.png" alt="image-20220402143405086" style="zoom:67%;" /><img src="/img/03.assets/image-20220402143444476.png" alt="image-20220402143444476" style="zoom:67%;" /><h5 id="私有继承中的访问权限距离"><a href="#私有继承中的访问权限距离" class="headerlink" title="私有继承中的访问权限距离"></a>私有继承中的访问权限距离</h5><p>”照此实现“：基类接口（<strong>公有成员函数</strong>）在派生类的成员函数中可以调用，故可以通过基类接口实现派生类功能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>: <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">baseFunc</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;in Base::baseFunc()...&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive2</span>: <span class="hljs-keyword">private</span> Base <br>&#123;<span class="hljs-comment">/// 私有继承， is-implementing-in-terms-of：用基类接口实现派生类功能</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deriveFunc</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; “<span class="hljs-function">in <span class="hljs-title">Derive2::deriveFunc</span><span class="hljs-params">()</span>,                   calling <span class="hljs-title">Base::baseFunc</span><span class="hljs-params">()</span>...&quot; &lt;&lt; endl</span>;<br>    <span class="hljs-built_in">baseFunc</span>(); <span class="hljs-comment">/// 私有继承时，基类接口在派生类成员函数中可以使用</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Derive2 obj2; <br>  cout &lt;&lt; <span class="hljs-string">&quot;calling obj2.deriveFunc()...&quot;</span> &lt;&lt; endl;<br>  obj2.<span class="hljs-built_in">deriveFunc</span>(); <br>  <span class="hljs-comment">//obj2.baseFunc(); ERROR: 基类接口不允许从派生类对象调用</span><br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>基类中的<strong>私有成员</strong>在派生类中无法访问！！！！！！“基类私有”的概念</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> a&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">protected</span>:<br>  <span class="hljs-type">int</span> b&#123;<span class="hljs-number">0</span>&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive</span> : <span class="hljs-keyword">private</span> Base&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getA</span><span class="hljs-params">()</span></span>&#123;cout&lt;&lt;a&lt;&lt;endl;&#125; <span class="hljs-comment">///编译错误，不可访问基类中私有成员</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getB</span><span class="hljs-params">()</span></span>&#123;cout&lt;&lt;b&lt;&lt;endl;&#125; <span class="hljs-comment">///可以访问基类中保护成员</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>  Derive d;<br>  d.<span class="hljs-built_in">getB</span>();<br>  <span class="hljs-comment">//cout&lt;&lt;d.b; ///编译错误，派生类对象不可访问基类中保护成员</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>”打开权限“后可以访问私有继承的基类部分函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<span class="hljs-keyword">private</span>:    <span class="hljs-type">int</span> data&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> data;&#125;    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123; data=i;&#125;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive1</span> : <span class="hljs-keyword">private</span> Base &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-keyword">using</span> Base::getData;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    Derive1 d1;    cout&lt;&lt;d1.<span class="hljs-built_in">getData</span>();    <span class="hljs-comment">//d1.setData(10);   ///隐藏了基类的setData函数，不可访问    //Base&amp; b = d1;        ///不允许私有继承的向上转换    //b.setData(10);    ///否则可以绕过D1，调用基类的setData函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；&#125;<br></code></pre></td></tr></table></figure><p>Summary:”取交集“</p><p><img src="/SekiroBlog/img/03.assets/image-20220402144526525.png" alt="image-20220402144526525"></p><p>解释：</p><p>派生类成员函数只有一行no：<strong>基类私有</strong>一定要彻底私有，无法通过任何方式访问</p><p>派生类对象只有一个yes：public∩public&#x3D;public，可以访问；其他都不行</p><p>保护成员：无法通过派生类对象访问，但派生类成员函数可以访问</p><h3 id="组合与继承的作用"><a href="#组合与继承的作用" class="headerlink" title="组合与继承的作用"></a>组合与继承的作用</h3><p>组合与继承的优点：支持增量开发。<br>允许引入新代码而不影响已有代码正确性。</p><ul><li><strong>相似：</strong><br>实现代码重用。<br>将子对象引入新类。<br>使用构造函数的初始化成员列表初始化。</li><li><strong>不同：</strong><br>组合：<br>嵌入一个对象以实现新类的功能。<br>has-a 关系。<br>继承：<br>沿用已存在的类提供的接口。<br>public 继承：is-a。<br>private 继承：is-implementing-in-terms-of。</li></ul><h3 id="重写隐藏"><a href="#重写隐藏" class="headerlink" title="重写隐藏"></a>重写隐藏</h3><p>重载(overload)：<br>目的：提供同名函数的不同实现，属于静态多态。<br>函数名必须相同，函数参数必须不同，作用域相同（如位于同一个类中；或同名全局函数）。</p><p><strong>重写隐藏(redefining)：</strong></p><ul><li>目的：在派生类中<strong>重新定义基类函数，实现派生类的特殊功能</strong>。</li><li>屏蔽了基类的<strong>所有其它同名</strong>函数。</li><li>函数名必须相同，函数参数可以不同</li></ul><p>1、重写隐藏发生时，基类中该成员函数的其他重载函数都将被屏蔽掉，不能提供给派生类对象使用</p><p>2、可以在派生类中通过<strong>using 类名::成员函数名</strong>; 在派生类中“恢复”指定的基类成员函数（即去掉屏蔽），使之重新可用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;B::f()\n&quot;</span>; &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Base::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;)\n&quot;</span>; &#125; <span class="hljs-comment">/// 重载</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Base::f(&quot;</span> &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot;)\n&quot;</span>; &#125; <span class="hljs-comment">///重载</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Base::f(T)\n&quot;</span>; &#125; <span class="hljs-comment">///重载</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Derive::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;)\n&quot;</span>; &#125; <span class="hljs-comment">///重写隐藏</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Derive d;<br>  d.<span class="hljs-built_in">f</span>(<span class="hljs-number">10</span>);<br>  d.<span class="hljs-built_in">f</span>(<span class="hljs-number">4.9</span>);<span class="hljs-comment">/// 编译警告。执行自动类型转换。</span><br>  <span class="hljs-comment">//  d.f();/// 被屏蔽，编译错误</span><br>  <span class="hljs-comment">//  d.f(T());/// 被屏蔽，编译错误</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、补充：using关键字的功能</p><p><img src="/SekiroBlog/img/03.assets/image-20220402150015754.png" alt="image-20220402150015754"></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3>]]></content>
    
    
    <categories>
      
      <category>OOP笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OOP随手记-Lec.8:虚函数</title>
    <link href="/SekiroBlog/2022/04/30/OOP%E9%9A%8F%E6%89%8B%E8%AE%B0-Lec-8-%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <url>/SekiroBlog/2022/04/30/OOP%E9%9A%8F%E6%89%8B%E8%AE%B0-Lec-8-%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>本周主要讲述了动多态与虚函数，其实我自己还没完全明白。<br>但还是放上来一下。<br>因为现在博客上的东西真的太少了。TAT</p><span id="more"></span><h2 id="Lec-8-虚函数"><a href="#Lec-8-虚函数" class="headerlink" title="Lec.8 虚函数"></a>Lec.8 虚函数</h2><p><strong>动多态</strong>及其实现方式</p><h3 id="向上类型转换"><a href="#向上类型转换" class="headerlink" title="向上类型转换"></a>向上类型转换</h3><ul><li>派生类对象&#x2F;引用&#x2F;指针转换成基类对象&#x2F;引用&#x2F;指针，称为向上类型转换。只对<strong>public继承</strong>有效，在继承图上是上升的；对private、protected继承无效。（因为违反安全原则）</li><li>向上类型转换（派生类到基类）可以由编译器自动完成，是一种<strong>隐式类型转换</strong>。</li><li>凡是接受基类对象&#x2F;引用&#x2F;指针的地方（如函数参数），都可以使用派生类对象&#x2F;引用&#x2F;指针，编译器会<strong>自动将派生类对象转换为基类对象</strong>以便使用。</li></ul><p>e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Base::print()&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Derive::print()&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Base obj)</span> </span>&#123; obj.<span class="hljs-built_in">print</span>(); &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>  Derive d;<br>  d.<span class="hljs-built_in">print</span>();<br>  <span class="hljs-built_in">fun</span>(d);<span class="hljs-comment">/// 本意：希望对Drive::print的调用——被切片，故只有基类成员函数了</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>1、对象的向上转换</p><p><img src="/SekiroBlog/img/02.assets/image-20220411135538907.png" alt="image-20220411135538907"></p><p>对象切片：派生类对象（指针or引用不会）被向上转换后，其被切片为对应基类</p><p>——导致<strong>数据丢失！</strong></p><p>e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Pet p;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Pet size:&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p) &lt;&lt; endl;<br>  Dog g;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Dog size:&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(g) &lt;&lt; endl;<br>  <span class="hljs-built_in">getSize</span>(g); <span class="hljs-comment">/// 对象切片(传参)，数据丢失</span><br>  p = g; <span class="hljs-comment">/// 对象切片(赋值)，数据丢失</span><br>  cout &lt;&lt; <span class="hljs-string">&quot;Pet size:&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p) &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-function">Pet <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>  cout &lt;&lt; p.att_i &lt;&lt; endl;<br>  <span class="hljs-function">Dog <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span>;<br>  cout &lt;&lt; g.att_i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; g.att_j &lt;&lt; endl;<br>  p = g; <span class="hljs-comment">/// 对象切片，只赋值基类数据</span><br>  cout &lt;&lt; p.att_i &lt;&lt; endl;<br>  <span class="hljs-comment">//cout &lt;&lt; p.att_j &lt;&lt; endl;  // 没有该参数，编译错误</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、指针&#x2F;引用的向上转换</p><p><img src="/SekiroBlog/img/02.assets/image-20220411135549207.png" alt="image-20220411135549207"></p><p>不创造新的对象，但<strong>只保留基类的接口</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-function">Dog <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span>;<br>  cout &lt;&lt; g.att_i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; g.att_j &lt;&lt; endl;<br>  Pet&amp; p = g; <span class="hljs-comment">/// 引用向上转换</span><br>  cout &lt;&lt; p.att_i &lt;&lt; endl;<br>  p.att_i = <span class="hljs-number">1</span>;        <span class="hljs-comment">/// 修改基类存在的数据</span><br>  cout &lt;&lt; p.att_i &lt;&lt; endl;<br>  cout &lt;&lt; g.att_i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; g.att_j &lt;&lt; endl; <span class="hljs-comment">/// 影响派生类</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>e.g.2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Instrument</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Instrument::play&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wind</span> : <span class="hljs-keyword">public</span> Instrument &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">// Redefine interface function:</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Wind::play&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tune</span><span class="hljs-params">(Instrument&amp; i)</span> </span>&#123;<br>  i.<span class="hljs-built_in">play</span>();<span class="hljs-comment">//编译器已经把该函数入口绑定在了基类上了！</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Wind flute;<br>  <span class="hljs-built_in">tune</span>(flute); <span class="hljs-comment">/// 引用的向上类型转换(传参)，编译器早绑定，无对象切片产生</span><br>  Instrument &amp;inst = flute;  <span class="hljs-comment">/// 引用的向上类型转换(赋值)</span><br>  inst.<span class="hljs-built_in">play</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>“早绑定”</p><h3 id="函数调用捆绑"><a href="#函数调用捆绑" class="headerlink" title="函数调用捆绑"></a>函数调用捆绑</h3><ul><li>把<strong>函数体与函数调用</strong>相联系称为捆绑(binding)。<br>即将函数体的具体实现代码，与调用的函数名绑定。执行到调用代码时进入直接进入捆绑好的函数体内部。</li><li>当<strong>捆绑在程序运行之前（由编译器和连接器）完成时</strong>，称为早捆绑(early binding)。<br>运行之前已经决定了函数调用代码到底进入哪个函数。<br>上面程序中的问题是早捆绑引起的，编译器将tune中的函数<strong>调用i.play()与Instrument::play()绑定</strong>。</li><li>当捆绑根据对象的实际类型(上例中即子类Wind而非Instrument)，发生在程序运行时，称为晚捆绑(late binding)，又称<strong>动态捆绑或运行时捆绑</strong>。<br>要求在运行时能确定对象的实际类型(思考：如何确定？)，并绑定正确的函数。<br>晚捆绑<strong>只对类中的虚函数起作用，使用 virtual 关键字声明虚函数</strong>。</li></ul><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>1、对于被派生类重新定义的成员函数，若它在基类中被声明为虚函数（如下所示），则通过基类指针或引用调用该成员函数时，<strong>编译器将根据所指（或引用）对象的实际类型决定</strong>是调用基类中的函数，还是调用派生类重写的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>   <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> ReturnType <span class="hljs-title">FuncName</span><span class="hljs-params">(argument)</span></span>; <span class="hljs-comment">//虚函数</span><br>...<br>&#125;;<br></code></pre></td></tr></table></figure><p>2、若某成员函数在基类中声明为虚函数，当<strong>派生类重写覆盖它时(同名，同参数函数)</strong> ，无论是否声明为虚函数，该成员函数都仍然是虚函数。</p><p>e.g. 对上一题的修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Instrument</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Instrument::play&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wind</span> : <span class="hljs-keyword">public</span> Instrument &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Wind::play&quot;</span> &lt;&lt; endl; &#125;<br>     <span class="hljs-comment">/// 重写覆盖(稍后：重写隐藏和重写覆盖的区别）</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tune</span><span class="hljs-params">(Instrument&amp; ins)</span> </span>&#123;<br>  ins.<span class="hljs-built_in">play</span>(); <span class="hljs-comment">/// 由于 Instrument::play 是虚函数，编译时不再直接绑定，运行时根据 ins 的实际类型调用。</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Wind flute;<br>  <span class="hljs-built_in">tune</span>(flute); <span class="hljs-comment">/// 向上类型转换，输出wind::play</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、</p><p>但应当注意：晚捆绑只对引用和指针有效。若形参是对象，则一定会发生切片，并早捆绑</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tune</span><span class="hljs-params">(Instrument ins)</span> </span>&#123;<br>  ins.<span class="hljs-built_in">play</span>(); <span class="hljs-comment">/// 晚绑定只对指针和引用有效，这里早绑定 Instrument::play</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Wind flute;<br>  <span class="hljs-built_in">tune</span>(flute); <span class="hljs-comment">/// 向上类型转换，对象切片，输出instrument::play</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、实现方法：虚函数表"><a href="#4、实现方法：虚函数表" class="headerlink" title="4、实现方法：虚函数表"></a>4、实现方法：虚函数表</h4><p>关键是 如何确定函数入口的地址？</p><p><img src="/SekiroBlog/img/02.assets/image-20220411141103244.png" alt="image-20220411141103244"></p><p>e.g.</p><p><img src="C:\Users\SekiroYoumu\AppData\Roaming\Typora\typora-user-images\image-20220411141350827.png" alt="image-20220411141350827"></p><p>对类型信息的存放会导致编译器隐式地存放了上述信息，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    cout&lt;&lt;<span class="hljs-string">&quot;int: &quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)&lt;&lt;endl;    cout&lt;&lt;<span class="hljs-string">&quot;NoVirtual: &quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(NoVirtual)&lt;&lt;endl;    cout&lt;&lt;<span class="hljs-string">&quot;void* : &quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">void</span>*)&lt;&lt;endl;    cout&lt;&lt;<span class="hljs-string">&quot;OneVirtual: &quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(OneVirtual)&lt;&lt;endl;    cout&lt;&lt;<span class="hljs-string">&quot;TwoVirtual: &quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(TwoVirtual)&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/02.assets/image-20220411142329187.png" alt="image-20220411142329187"></p><h3 id="虚函数与构造函数-x2F-析构函数"><a href="#虚函数与构造函数-x2F-析构函数" class="headerlink" title="虚函数与构造函数&#x2F;析构函数"></a>虚函数与构造函数&#x2F;析构函数</h3><p>1、虚函数与构造函数</p><p>(1)</p><ul><li>当创建一个包含有虚函数的对象时，必须<strong>初始化它的VPTR以指向相应的VTABLE</strong>。设置VPTR的工作由<strong>构造函数</strong>完成。编译器在构造函数的开头秘密的插入能初始化VPTR的代码。</li></ul><p>(2)构造函数<strong>不能也不必</strong>是虚函数。</p><ul><li>不能：如果构造函数是虚函数，则创建对象时需要先知道VPTR，而在构造函数调用前，VPTR未初始化。</li><li>不必：构造函数的作用是提供类中成员初始化，调用时明确指定要创建对象的类型，没有必要是虚函数。</li></ul><p>(3)构造函数调用虚函数</p><p>e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Base::foo&quot;</span>&lt;&lt;endl;&#125;<br>  <span class="hljs-built_in">Base</span>()&#123;<span class="hljs-built_in">foo</span>();&#125; <span class="hljs-comment">///在构造函数中调用虚函数foo  </span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">foo</span>();&#125;;<span class="hljs-comment">///在普通函数中调用虚函数foo</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> _num;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Derived::foo&quot;</span>&lt;&lt;_num&lt;&lt;endl;&#125;  <span class="hljs-built_in">Derived</span>(<span class="hljs-type">int</span> j):<span class="hljs-built_in">Base</span>(),_num(j)&#123;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-function">Derived <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;    Base &amp;b = d;    b.<span class="hljs-built_in">bar</span>();    b.<span class="hljs-built_in">foo</span>();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/02.assets/image-20220411142743142.png" alt="image-20220411142743142"></p><p>Summary: 构造函数调用虚函数只能调用本地版本！因为派生类此时还没分配好内存，会导致非法的内存访问。</p><p>•在构造函数中调用一个虚函数，被**调用的只是这个函数的本地版本(即当前类的版本)**，即虚机制在构造函数中不工作。</p><p>•派生类对象初始化顺序：(与构造函数初始化列表顺序无关)</p><p>①<strong>基类初始化</strong></p><p>②<strong>对象成员初始化</strong></p><p>③<strong>构造函数体</strong></p><p>•原因：基类的构造函数比派生类先执行，调用基类构造函数时派生类中的数据成员还没有初始化(上例中 Derive中的数据成员i)。如果允许调用实际对象的虚函数(如b.foo())，则可能会用到未初始化的派生类成员。</p><p>2、虚函数与析构函数</p><ul><li>析构函数<strong>能是虚的，且常常是虚的</strong>。虚析构函数仍需定义函数体。</li><li>虚析构函数的用途：当删除基类对象指针时，编译器将<strong>根据指针所指对象的实际类型，调用相应的析构函数</strong>。</li><li>若基类析构不是虚函数，则删除基类指针所指派生类对象时，编译器仅自动调用基类的析构函数，而不会考虑实际对象是不是基类的对象。这可能<strong>会导致内存泄漏</strong>。</li><li>同样，在<strong>析构函数中调用一个虚函数，被调用的只是这个函数的本地版本</strong>，即虚机制在析构函数<strong>中</strong>不工作。   为什么？</li></ul><p>e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  ~<span class="hljs-built_in">Base1</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;~Base1()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived1</span> : <span class="hljs-keyword">public</span> Base1 &#123;<br><span class="hljs-keyword">public</span>:<br>  ~<span class="hljs-built_in">Derived1</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;~Derived1()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Base2</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;~Base2()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived2</span> : <span class="hljs-keyword">public</span> Base2 &#123;<br><span class="hljs-keyword">public</span>:<br>  ~<span class="hljs-built_in">Derived2</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;~Derived2()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Base1* bp = <span class="hljs-keyword">new</span> Derived1;<br>  <span class="hljs-keyword">delete</span> bp; <span class="hljs-comment">/// 只调用了基类的虚析构函数，根据指针类型选择</span><br>  Base2* b2p = <span class="hljs-keyword">new</span> Derived2;<br>  <span class="hljs-keyword">delete</span> b2p; <span class="hljs-comment">/// 派生类虚析构函数调用完后调用基类的虚析构函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/02.assets/image-20220411143558393.png" alt="image-20220411143558393"><strong>将基类的析构函数设置为虚析构函数！</strong></p><h3 id="重载-x2F-重写覆盖-x2F-重写隐藏的区分"><a href="#重载-x2F-重写覆盖-x2F-重写隐藏的区分" class="headerlink" title="重载&#x2F;重写覆盖&#x2F;重写隐藏的区分"></a>重载&#x2F;重写覆盖&#x2F;重写隐藏的区分</h3><ul><li><p>重载(overload)：<br>函数名必须相同，函数参数必须不同，作用域相同(同一个类，或同为全局函数)，返回值可以相同或不同。</p></li><li><p>重写覆盖(override)：<br>派生类重新定义基类中的虚函数，函数名必须相同，函数参数必须相同，返回值一般情况应相同。<br>派生类的虚函数表中原基类的虚函数指针会<strong>被派生类中重新定义的虚函数指针覆盖掉</strong>。</p></li><li><p>重写隐藏(redefining)：<br>派生类重新定义基类中的函数，函数名相同，但是参数不同或者基类的函数不是虚函数。(参数相同+虚函数-&gt;不是重写隐藏)<br>重写隐藏中<strong>虚函数表不会发生覆盖</strong>。（保留基类继承而来的虚函数）</p><p><img src="/SekiroBlog/img/02.assets/image-20220411143935739.png" alt="image-20220411143935739"></p></li></ul><p><img src="C:\Users\SekiroYoumu\AppData\Roaming\Typora\typora-user-images\image-20220411144209931.png" alt="image-20220411144209931"></p><p><img src="/SekiroBlog/img/02.assets/image-20220411144216374.png" alt="image-20220411144216374"></p><p>重要的是明白基类指针指向哪个函数！也就是虚函数表中各个入口地址是什么情况</p><h4 id="辅助检查：override关键字"><a href="#辅助检查：override关键字" class="headerlink" title="辅助检查：override关键字"></a>辅助检查：override关键字</h4><p>重写覆盖要满足的条件很多，很容易写错，可以<strong>使用override关键字辅助检查。</strong></p><ul><li>override关键字明确地告诉编译器一个函数是对基类中一个虚函数的重写覆盖，编译器将对重写覆盖要满足的条件进行检查，正确的重写覆盖才能通过编译。</li><li>如果没有override关键字，但是满足了重写覆盖的各项条件，也能实现重写覆盖。它只是编译器的一个检查，正确实现override时，对编译结果没有影响。</li></ul><h4 id="禁止重写：final关键字"><a href="#禁止重写：final关键字" class="headerlink" title="禁止重写：final关键字"></a>禁止重写：final关键字</h4><p>不想让使用者继承？-&gt; final关键字!<br>在虚函数声明或定义中使用时，final确保函数为虚且不可被派生类重写。</p><p>可在继承关系链的“中途”进行设定，<strong>禁止后续派生类对指定虚函数重写</strong>。<br>在类定义中使用时，final指定此类不可被继承。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>: <span class="hljs-keyword">public</span> Base &#123;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-keyword">final</span> </span>&#123;&#125;; <span class="hljs-comment">/// 重写覆盖，且是最终覆盖</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> <span class="hljs-keyword">final</span> </span>&#123;&#125;; <span class="hljs-comment">/// bar 非虚函数，编译错误</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">final</span> : <span class="hljs-keyword">public</span> A&#123;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;&#125;; <span class="hljs-comment">/// A::foo 已是最终覆盖，编译错误</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> : <span class="hljs-keyword">public</span> B&#123; <span class="hljs-comment">/// B 不能被继承，编译错误</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="OOP的核心思想及其实现方式"><a href="#OOP的核心思想及其实现方式" class="headerlink" title="OOP的核心思想及其实现方式"></a>OOP的核心思想及其实现方式</h3><p>OOP的核心思想是<strong>数据抽象、继承与动态绑定</strong></p><ul><li><p>数据抽象：类的接口与实现分离<br>Animal\模板设计的例子</p></li><li><p>继承：建立相关类型的层次关系（基类与派生类）<br>Is-a、is-implementing-in-terms-of: 客观世界的认知关系</p></li><li><p>动态绑定：统一使用基类指针，实现多态行为<br><strong>虚函数（动多态）</strong><br>类型转换，模板（静多态）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>OOP笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OOP随手记-Lec.9:多态与模板</title>
    <link href="/SekiroBlog/2022/04/28/hello-hexo/"/>
    <url>/SekiroBlog/2022/04/28/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>我也要有自己的博客了吗！<br>随便放点东西测试一下。把最近上OOP的笔记更新上来吧。</p><span id="more"></span><h2 id="Lec-9-多态与模板"><a href="#Lec-9-多态与模板" class="headerlink" title="Lec.9 多态与模板"></a>Lec.9 多态与模板</h2><h3 id="纯虚函数与抽象类"><a href="#纯虚函数与抽象类" class="headerlink" title="纯虚函数与抽象类"></a>纯虚函数与抽象类</h3><ul><li><p>虚函数还可以进一步声明为纯虚函数（如下所示），包含纯虚函数的类，通常被称为<strong>“抽象类”</strong>。<br>virtual 返回类型 函数名(形式参数) &#x3D; 0; </p></li><li><p>抽象类<strong>不允许定义对象</strong>，定义基类为抽象类的主要用途是为派生类<strong>规定共性“接口</strong>”</p></li><li><p><strong>特点：</strong></p><p>•不允许定义对象。</p><p>•只能<strong>为派生类提供接口</strong>。</p><p>•能避免对象切片：保证只有指针和引用能被向上类型转换。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">/// 可在类外定义函数体提供默认实现。派生类通过 A::f() 调用</span><br>&#125;;<br>A obj; <span class="hljs-comment">/// 不准抽象类定义对象！编译不通过！</span><br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/01.assets/image-20220418133937541.png" alt="image-20220418133937541"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123; <br><span class="hljs-keyword">public</span>:  <br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Pet::motion</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Pet motion: &quot;</span> &lt;&lt; endl; &#125; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>: <span class="hljs-keyword">public</span> Pet &#123; <br><span class="hljs-keyword">public</span>: <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;Pet::<span class="hljs-built_in">motion</span>(); cout &lt;&lt; <span class="hljs-string">&quot;dog run&quot;</span> &lt;&lt; endl; &#125; <br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>: <span class="hljs-keyword">public</span> Pet &#123;<br><span class="hljs-keyword">public</span>: <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;Pet::<span class="hljs-built_in">motion</span>(); cout &lt;&lt; <span class="hljs-string">&quot;bird fly&quot;</span> &lt;&lt; endl; &#125; <br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Pet* p = <span class="hljs-keyword">new</span> Dog; <span class="hljs-comment">/// 向上类型转换</span><br>  p-&gt;<span class="hljs-built_in">motion</span>();<br>  p = <span class="hljs-keyword">new</span> Bird; <span class="hljs-comment">/// 向上类型转换</span><br>  p-&gt;<span class="hljs-built_in">motion</span>();<br>  <span class="hljs-comment">//p = new Pet; /// 不允许定义抽象类对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>基类纯虚函数被派生类重写覆盖之前仍是纯虚函数。因此当继承一个抽象类时，除纯虚析构函数外（后面解释），必须实现（重写覆盖）所有纯虚函数，否则继承出的类也是抽象类。</p><p>why?</p><p>对于纯虚析构函数而言，即便派生类中不显式实现，编译器<strong>也会自动合成默认析构函数</strong>。因此，即使派生类不显式覆盖纯虚析构函数，只要派生类覆盖了其他纯虚函数，该派生类就不是抽象类，可以定义派生类对象。</p><h4 id="纯虚析构函数"><a href="#纯虚析构函数" class="headerlink" title="纯虚析构函数"></a>纯虚析构函数</h4><ul><li>纯虚析构函数仍然需要函数体</li><li>目的：<strong>使基类成为抽象类，不能创建基类的对象</strong>。如果有其他函数是纯虚函数，则析构函数无论是否为纯虚的，基类均为抽象类。</li></ul><p>（why? 虽然是纯虚函数，但名字不同，故派生类中没必要再写一个名字相同的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123; <br><span class="hljs-keyword">public</span>: <br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Base</span>()=<span class="hljs-number">0</span>; <br>&#125;;<br>Base::~<span class="hljs-built_in">Base</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Base destroyed&quot;</span>&lt;&lt;endl;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive1</span>: <span class="hljs-keyword">public</span> Base &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derive2</span>: <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>: <br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Derive2</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Derive2 destroyed&quot;</span>&lt;&lt;endl;&#125; &#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Base* p1 = <span class="hljs-keyword">new</span> Derive1;<br>Base* p2 = <span class="hljs-keyword">new</span> Derive2;<br><span class="hljs-keyword">delete</span> p1;<br>cout &lt;&lt; “------” &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> p2;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*Base destroyed(也调用了Derive1，只不过是隐式定义的)</span><br><span class="hljs-comment">------</span><br><span class="hljs-comment">Derive2 destroyed</span><br><span class="hljs-comment">Base destroyed</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/01.assets/image-20220425162411624.png" alt="image-20220425162411624"></p><h3 id="向下类型转换"><a href="#向下类型转换" class="headerlink" title="向下类型转换"></a>向下类型转换</h3><p>回顾：向上类型转换：<br>转换为基类指针或引用，则对应虚函数表仍为派生类的虚函数表（晚绑定）。<br>转换为基类对象，产生对象切片，调用基类函数（早绑定）。</p><p><strong>基类指针&#x2F;引用转换成派生类指针&#x2F;引用</strong>，则称为向下类型转换。（类层次中向下移动）</p><ul><li>当我们用基类指针表示各种派生类时(向上类型转换)，保留了他们的共性，但是丢失了他们的特性。如果此时要表现特性，则可以使用向下类型转换。</li><li>比如我们可以使用<strong>基类指针数组对各种派生类对象</strong>进行管理，当具体处理时我们可以将基类指针转换为实际的派生类指针，进而调用派生类专有的接口</li></ul><h4 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h4><ul><li>C++提供了一个特殊的显式类型转换，称为dynamic_cast，是一种安全的向下类型转换。</li><li>使用dynamic_cast的对象必须有虚函数，因为它使用了<strong>存储在虚函数表中的信息判断实际的类型。</strong></li><li>使用方法：<br>obj_p，obj_r分别是T1类型的指针和引用<br>T2* pObj &#x3D; dynamic_cast&lt;T2*&gt;(obj_p);<br>&#x2F;&#x2F;转换为T2指针，运行时失败返回nullptr<br>T2&amp; refObj &#x3D; dynamic_cast&lt;T2&amp;&gt;(obj_r);<br>&#x2F;&#x2F;转换为T2引用，运行时失败抛出bad_cast异常<br>在向下转换中，T1必须是多态类型（声明或继承了至少一个虚函数的类），否则不过编译</li></ul><h4 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h4><ul><li>如果我们知道正在<strong>处理的是哪些类型</strong>，可以使用static_cast来避免这种开销。<br>static_cast在编译时静态浏览类层次，<strong>只检查继承关系</strong>。没有继承关系的类之间，必须具有转换途径才能进行转换（要么自定义，要么是语言语法支持），否则不过编译。运行时无法确认是否正确转换。</li><li>static_cast使用方法：<br>obj_p，obj_r分别是T1类型的指针和引用<br>T2* pObj &#x3D; static_cast&lt;T2*&gt;(obj_p);<br>  &#x2F;&#x2F;转换为T2指针<br>T2&amp; refObj &#x3D; static_cast&lt;T2&amp;&gt;(obj_r);<br>  &#x2F;&#x2F;转换为T2引用<br>不安全：不保证指向目标是T2对象，可能导致非法内存访问</li></ul><h4 id="dynamic-cast与static-cast"><a href="#dynamic-cast与static-cast" class="headerlink" title="dynamic_cast与static_cast"></a>dynamic_cast与static_cast</h4><ul><li>相同点：<br>都可完成向下类型转换。</li><li>不同点：<br>static_cast在编译时<strong>静态</strong>执行向下类型转换。</li><li>dynamic_cast会在<strong>运行时</strong>检查被转换的对象<strong>是否确实是正确的派生类</strong>。额外的检查需要 RTTI (Run-Time Type Information)，因此要比static_cast慢一些，但是更安全。<br>一般使用dynamic_cast进行向下类型转换</li></ul><p><strong>Summary: 判断指针指向的是否是所需的真正对象</strong></p><p><strong>1）指针或引用的向上转换总是安全的；</strong><br><strong>2）向下转换时用dynamic_cast，安全检查；</strong><br><strong>3）避免对象之间的转换。</strong></p><p><img src="/SekiroBlog/img/01.assets/image-20220418140501192.png" alt="image-20220418140501192"><img src="/SekiroBlog/img/01.assets/image-20220418140827399.png" alt="image-20220418140827399"></p><p>应当清楚指向的是基类对象还是派生类对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123; <span class="hljs-keyword">public</span>:  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Pet</span>() &#123;&#125; &#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Pet &#123; <br><span class="hljs-keyword">public</span>: <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;dog run&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> : <span class="hljs-keyword">public</span> Pet &#123;<br><span class="hljs-keyword">public</span>: <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;bird fly&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">action</span><span class="hljs-params">(Pet* p)</span> </span>&#123;<br><span class="hljs-keyword">auto</span> d = <span class="hljs-built_in">dynamic_cast</span>&lt;Dog*&gt;(p);<span class="hljs-comment">/// 向下类型转换</span><br><span class="hljs-keyword">auto</span> b = <span class="hljs-built_in">dynamic_cast</span>&lt;Bird*&gt;(p);<span class="hljs-comment">/// 向下类型转换</span><br><span class="hljs-keyword">if</span> (d) <span class="hljs-comment">/// 运行时根据实际类型表现特性</span><br>d-&gt;<span class="hljs-built_in">run</span>();<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b)<br>b-&gt;<span class="hljs-built_in">fly</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Pet* p[<span class="hljs-number">2</span>];<br>p[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Dog; <span class="hljs-comment">/// 向上类型转换</span><br>p[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Bird; <span class="hljs-comment">/// 向上类型转换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) &#123;<br><span class="hljs-built_in">action</span>(p[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多重继承中的虚函数"><a href="#多重继承中的虚函数" class="headerlink" title="多重继承中的虚函数"></a>多重继承中的虚函数</h3><p><img src="/SekiroBlog/img/01.assets/image-20220425164056101.png" alt="image-20220425164056101"></p><p>多重继承的问题：</p><ul><li>二义性：如果派生类D继承的两个基类A,B，有同名成员a，则访问D中a时，编译器无法判断要访问的哪一个基类成员。</li><li>钻石型继承树（DOD：Diamond Of Death）带来的数据冗余：右图中如果 InputFile 和 OutputFile 都含有继承自 File 的 filename 变量，则 IOFile 会有两份独立的 filename，而这实际上并不需要。</li></ul><p><img src="/SekiroBlog/img/01.assets/image-20220418142236127.png" alt="image-20220418142236127"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhatCanSpeak</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">WhatCanSpeak</span>() &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  &#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhatCanMotion</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">WhatCanMotion</span>() &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;   &#125;;<span class="hljs-comment">//提供接口，通用！与派生类无关</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span> : <span class="hljs-keyword">public</span> WhatCanSpeak, <span class="hljs-keyword">public</span> WhatCanMotion<br>&#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;say&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;walk&quot;</span> &lt;&lt; endl; &#125;<span class="hljs-comment">//实现函数</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSpeak</span><span class="hljs-params">(WhatCanSpeak* obj)</span> </span>&#123; obj-&gt;<span class="hljs-built_in">speak</span>(); &#125;<span class="hljs-comment">//调用函数，通用！与派生类无关</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doMotion</span><span class="hljs-params">(WhatCanMotion* obj)</span> </span>&#123; obj-&gt;<span class="hljs-built_in">motion</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Human human;<br><span class="hljs-built_in">doSpeak</span>(&amp;human); <span class="hljs-built_in">doMotion</span>(&amp;human);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用虚函数实现动态的多态行为！隔离开“变”与“不变”</p><p>派生类改变，接口不变</p><h4 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态 Polymorphism"></a>多态 Polymorphism</h4><ul><li>按照基类的接口定义，调用指针或引用所指对象的接口函数，函数执行过程因对象实际<strong>所属派生类的不同而呈现不同的效果</strong>（表现），这个现象被称为“多态”。</li><li>当利用基类指针&#x2F;引用调用函数时<br>虚函数在运行时确定执行哪个版本，取决于引用或指针对象的真实类型<br>非虚函数在编译时绑定</li><li>当利用类的对象直接调用函数时<br>无论什么函数，均在编译时绑定</li><li>产生多态效果的条件：继承 &amp;&amp; 虚函数 &amp;&amp; (引用 或 指针)</li><li><img src="/SekiroBlog/img/01.assets/image-20220418143002571.png" alt="image-20220418143002571"></li></ul><p>典例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123; <br><span class="hljs-keyword">public</span>:  <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">speak</span>();<br><span class="hljs-built_in">motion</span>();<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Animal speak&quot;</span> &lt;&lt; endl; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Animal motion&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> : <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Bird singing&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Bird flying&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span> : <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Fish cannot speak ...&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">motion</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Fish swimming&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Fish fish;<br>  Bird bird;<br>  fish.<span class="hljs-built_in">action</span>(); <span class="hljs-comment">///不同调用方法</span><br>  bird.<span class="hljs-built_in">action</span>();<br><br>  Animal *pBase1 = <span class="hljs-keyword">new</span> Fish;<br>  Animal *pBase2 = <span class="hljs-keyword">new</span> Bird;<br>  pBase1-&gt;<span class="hljs-built_in">action</span>(); <span class="hljs-comment">///同一调用方法，根据</span><br>  pBase2-&gt;<span class="hljs-built_in">action</span>(); <span class="hljs-comment">///实际类型完成相应动作 </span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/SekiroBlog/img/01.assets/image-20220418143338219.png" alt="image-20220418143338219"></p><h4 id="应用-TEMPLATE-METHOD-模板方法设计模式"><a href="#应用-TEMPLATE-METHOD-模板方法设计模式" class="headerlink" title="应用: TEMPLATE METHOD 模板方法设计模式"></a>应用: TEMPLATE METHOD 模板方法设计模式</h4><ul><li>在接口的一个方法中定义算法的骨架</li><li>将一些步骤的实现延迟到子类中</li><li>使得子类可以在<strong>不改变算法结构的情况下，重新定义算法中的某些步骤</strong>。</li><li>模板方法是一种<strong>源代码重用</strong>的基本技术，在类库的设计实现中应用十分广泛，因为这个设计模式能有效地解决 “类库提供公共行为”与“用户定制特殊细节”之间的折中平衡。</li></ul><p>有效框架：</p><p><img src="/SekiroBlog/img/01.assets/image-20220418143702100.png" alt="image-20220418143702100"></p><p><img src="/SekiroBlog/img/01.assets/image-20220418143709266.png" alt="image-20220418143709266"></p><p>可以通过继承和组合重用对象代码</p><p><strong>可以通过模板特征重用源代码</strong></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>有些算法实现与类型无关，所以可以<strong>将函数的参数类型也定义为一种特殊的“参数”</strong>，这样就得到了“函数模板”。</li><li>定义函数模板的方法<br>template <typename T> ReturnType Func(Args)；</li><li>如：任意类型两个变量相加的“函数模板”<br>template <typename T><br>T sum(T a, T b) { return a + b; }&#x2F;&#x2F;需要加法运算符被重载过<br>注：typename也可换为class</li></ul><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><ul><li>函数模板在调用时，编译器能<strong>自动推导出实际参数的类型</strong>（这个过程叫做实例化）。<br>所以，形式上调用一个函数模板与普通函数没有区别，如<br>cout &lt;&lt; sum(9, 3); <br>cout &lt;&lt; sum(2.1, 5.7);</li><li>调用类型需要满足函数的要求。本例中，要求类型 T 定义了加法运算符。<br>当多个参数的类型不一致时，无法推导：<br>    cout &lt;&lt; sum(9, 2.1); &#x2F;&#x2F;编译错误</li><li>可以手工指定调用类型：sum<int>(9, 2.1)</li></ul><p>以排序为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T* data, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123; <span class="hljs-comment">//选择排序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br><span class="hljs-keyword">if</span>(data[i] &gt; data[j])<br>std::<span class="hljs-built_in">swap</span>(data[i], data[j]); <span class="hljs-comment">//交换元素位置</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(T* data, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>std::cout &lt;&lt; data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>std::cout &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> arr_a[] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">sort</span>(arr_a, <span class="hljs-number">5</span>);  <span class="hljs-comment">//调用int类型的sort</span><br><span class="hljs-built_in">output</span>(arr_a, <span class="hljs-number">5</span>); <span class="hljs-comment">//调用int类型的output</span><br><br><span class="hljs-type">float</span> arr_b[] = &#123;<span class="hljs-number">3.2</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">4.3</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">5.7</span>&#125;;<br><span class="hljs-built_in">sort</span>(arr_b, <span class="hljs-number">5</span>); <span class="hljs-comment">//调用float类型的sort</span><br><span class="hljs-built_in">output</span>(arr_b, <span class="hljs-number">5</span>);  <span class="hljs-comment">//调用float类型的output</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="模板生成的原理"><a href="#模板生成的原理" class="headerlink" title="模板生成的原理"></a>模板生成的原理</h4><p>对模板的处理是在编译期进行的，每当编译器发现对模板的一种参数的使用，就生成对应参数的一份代码。</p><p>也带来了问题：</p><p><strong>模板库必须在头文件中实现，不可以分开编译</strong>（请思考为什么？）</p><p>因为模板的原理是：在编译时，每发现一种模板参数的模板实例，就生成对应模板参数的代码。</p><p>如果使用源代码分开编译，则编译模板库的源代码时，编译器并不知道这一模板库有哪些模板实例；而编译模板实例时，又没有模板库的源代码来作生成。</p><p>因此会产生链接错误，没有生成对应模板参数的源代码。——不知道如何实现，无法链接</p><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><p>在定义类时也可以将一些类型信息抽取出来，用模板参数来替换，从而使类更具通用性。这种类被称为“类模板”。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>T data;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>(T _data): <span class="hljs-built_in">data</span>(_data) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; data &lt;&lt; endl; &#125;<br>&#125;; <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> A&lt;T&gt;::<span class="hljs-built_in">print</span>() &#123; cout &lt;&lt; data &lt;&lt; endl; &#125; <span class="hljs-comment">//定义要带模板参数！</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">A&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>a.<span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="类模板的“模板参数”"><a href="#类模板的“模板参数”" class="headerlink" title="类模板的“模板参数”"></a>类模板的“模板参数”</h5><p>类型参数：使用typename或class标记<br><strong>非类型参数：整数，枚举，指针（指向对象或函数），引用（引用对象或引用函数）。无符号整数(unsigned)比较常用。</strong>如：<br>  template&lt;typename T, unsigned size&gt;<br>  class array {<br>      T elems[size];<br>  }; </p><p>  array&lt;char, 10&gt; array0; </p><p><strong>所有模板参数必须在编译期确定，不可以使用变量！！</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-type">unsigned</span> size&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;<br>  T elems[size];<br>&#125;; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<br>  <span class="hljs-comment">//array&lt;char, n&gt; array0; //不能使用变量</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> m = <span class="hljs-number">5</span>;<br>  array&lt;<span class="hljs-type">char</span>, m&gt; array1; <span class="hljs-comment">//可以使用常量</span><br>  array&lt;<span class="hljs-type">char</span>, 5&gt; array2; <span class="hljs-comment">//或具体数值</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模板与多态"><a href="#模板与多态" class="headerlink" title="模板与多态"></a>模板与多态</h3><ul><li>模板使用泛型标记，使用同一段代码，来关联不同但相似的特定行为，最后可以获得不同的结果。模板也是多态的一种体现。</li><li>但模板的关联是在编译期处理，称为<strong>静多态</strong>。（编译期多态）<ul><li>往往和函数重载同时使用</li><li>高效，省去函数调用</li><li>编译后代码增多</li></ul></li><li>基于继承和虚函数的多态在运行期处理，称为动多态<ul><li>运行时，灵活方便</li><li>侵入式，必须继承</li><li>存在函数调用</li></ul></li></ul><p>std标准模板库</p><h3 id="成员函数模板"><a href="#成员函数模板" class="headerlink" title="成员函数模板"></a>成员函数模板</h3>]]></content>
    
    
    <categories>
      
      <category>OOP笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
